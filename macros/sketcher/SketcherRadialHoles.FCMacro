"""
This macro generates a radial pattern
"""

import FreeCAD as App
import Sketcher

# Python Bindings for QT
from PySide.QtGui import QDialog
from PySide.QtGui import QSpinBox
from PySide.QtGui import QLabel
from PySide.QtGui import QPushButton
from PySide.QtGui import QVBoxLayout
from PySide.QtGui import QHBoxLayout


class ToolDialog(QDialog):
    def __init__(self):
        super(ToolDialog, self).__init__()
        layout = QVBoxLayout()

        # default values
        self.defaultRingNumber = 4
        self.defaultHoleDiameter = 2

        # inputs
        nRingsLabel = QLabel("Enter number of radial rings:")
        self.n_rings_input = QSpinBox()
        self.n_rings_input.setValue(self.defaultRingNumber)

        diameterLabel = QLabel("Enter diameter of holes (mm):")
        self.hole_diameter_input = QSpinBox()
        self.hole_diameter_input.setValue(self.defaultHoleDiameter)

        # buttons
        buttonsLayout = QHBoxLayout()
        generateButton = QPushButton("generate")
        generateButton.clicked.connect(self.generate)
        closeButton = QPushButton("close")
        closeButton.clicked.connect(self.close)
        buttonsLayout.addWidget(generateButton)
        buttonsLayout.addWidget(closeButton)

        # add stuff to layout
        layout.addWidget(nRingsLabel)
        layout.addWidget(self.n_rings_input)
        layout.addWidget(diameterLabel)
        layout.addWidget(self.hole_diameter_input)
        layout.addLayout(buttonsLayout)

        self.setLayout(layout)

        self.show()

    def generate(self):
        # ensure that we are in a sketch
        if App.ActiveDocument.ActiveObject.TypeId != "Sketcher::SketchObject":
            # TODO add a warning message box
            print("You must be within a Sketch to run this.")
            self.close()
            return

        sketchName = App.ActiveDocument.ActiveObject.Name
        sketch     = App.ActiveDocument.getObject(sketchName)

        nRings       = self.n_rings_input.value()
        holeDiameter = self.hole_diameter_input.value()

        # create first ring as origin of geometry
        origin = 0 # TODO set the origin to be some vector or something
        # TODO set this to use the origin
        sketch.addGeometry(Part.Circle(App.Vector(-15.391302,-12.956521,0),App.Vector(0,0,1),7.339455),False)



        # iterate from the second ring
        for ring in range(1, nRings):
            # how many holes in this ring?
            nHoles = getHoleCount(ring)

            # get angles between each hole
            angle = 360.0/float(nHoles)

            for hole in range(0, nHoles):
                # offset
            #
            sketch.addGeometry(Part.Circle(App.Vector(-15.391302,-12.956521,0),App.Vector(0,0,1),7.339455),False)

        # TODO do more stuff

        App.ActiveDocument.recompute()

    def getHoleCount(self, ring):
        # determine the number of holes in the given ring
        ringToHoleCount = [1, 6, 12, 20]
        return ringToHoleCount[ring]


radialHoleTool = ToolDialog()
